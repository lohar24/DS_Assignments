# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DCifSUe5xLZpEPAX0tvFlaMOcm5avdno
"""

# Step2:. Prepare the Model and Data
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer


# Load the dataset
train_df = pd.read_csv(r'Titanic_train.csv')

# Handle missing values
train_df['Age'].fillna(train_df['Age'].median(), inplace=True)
train_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace=True)

# Select features and target variable
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = train_df[features]
y = train_df['Survived']

# Preprocessing pipeline
numeric_features = ['Age', 'SibSp', 'Parch', 'Fare']
categorical_features = ['Pclass', 'Sex', 'Embarked']

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Define the model
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression(max_iter=1000))
])

# Train the model
model.fit(X, y)

import streamlit as st

# Title and description
st.title('Titanic Survival Prediction')
st.write('This app predicts the survival probability of Titanic passengers based on input features.')

# Input form
st.sidebar.header('User Input Parameters')

def user_input_features():
    Pclass = st.sidebar.selectbox('Pclass', [1, 2, 3])
    Sex = st.sidebar.selectbox('Sex', ['male', 'female'])
    Age = st.sidebar.slider('Age', 0, 100, 30)
    SibSp = st.sidebar.slider('Siblings/Spouses Aboard', 0, 10, 0)
    Parch = st.sidebar.slider('Parents/Children Aboard', 0, 10, 0)
    Fare = st.sidebar.slider('Fare', 0, 600, 50)
    Embarked = st.sidebar.selectbox('Embarked', ['C', 'Q', 'S'])
    data = {'Pclass': Pclass,
            'Sex': Sex,
            'Age': Age,
            'SibSp': SibSp,
            'Parch': Parch,
            'Fare': Fare,
            'Embarked': Embarked}
    features = pd.DataFrame(data, index=[0])
    return features

input_df = user_input_features()

# Make predictions
prediction = model.predict(input_df)
prediction_proba = model.predict_proba(input_df)

# Display prediction
st.subheader('Prediction')
survival_status = ['Not Survived', 'Survived']
st.write(survival_status[prediction[0]])

# Display prediction probabilities
st.subheader('Prediction Probability')
st.write(f"Probability of Not Surviving: {prediction_proba[0][0]:.2f}")
st.write(f"Probability of Surviving: {prediction_proba[0][1]:.2f}")